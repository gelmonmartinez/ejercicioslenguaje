Este tiene una particularidad, puesto que a diferencia de los enteros en donde la neutralidad del 0 es hacia la izquierda,
n los decimales se asume la neutralidad del 0 a la derecha: 0.4 es igual a 0.40 y a 0.400, y por su puesto mayor a 0,39 y
a 0,399. Si se quisiera aclarar la periodicidad de un numero deberia colocarse un signo por arriba
de l o los numeros que quieren mostrarse como periodicos, pudiendo estos no ser los finales de las cifras decimales.

Ejemplos de numeros enteros
2
Listan varios numeros enteros a modo de ejemplo, aclarando tambien la forma en la que se los debe nombrar con palabras:

230 (docientos treinta.)
12 (doce)
2,711 (dos mil setecientos once)
1 (uno)
-32 (menos treinta y dos)
1,000 (mil)
1,500.040 (un millon quinientos mil cuarenta)
-3 (menos tres)
932 (novecientos treinta y dos)
88 (ochenta y ocho)
1.000.000.000.000 (un billon)
52 (cincuenta y dos
-1.000.000 (menos un millon)
666 (seiscientos sesenta y seis)
7.412 (siete mil cuatrocientos doce)
4 (cuatro)
-326 (menos trescientos veintiseis)
15 (quince)
0 (cero)
99 (noventa y nueve)



Java tiene cinco operadores aritmaticos cuyo significado se muestra en la tabla adjunta

Operador	Nombre	Ejemplo
+	Suma	453+ 354
-	Diferencia	123-434
*	Producto	673*904
/	Cociente	290/770
%	Modulo	20%7
El cociente entre dos enteros da como resultado un entero. Por ejemplo, al dividir 20 entre 7 nos da como resultado 2.
El operador modulo da como resultado el resto de la division entera. Por ejemplo 20%7 da como resultado 6 que es el resto
de la division entre 20 y 7.
El operador modulo tambien se puede emplear con numeros reales. Por ejemplo, el cociente entre 7.5 y 3.0 es 2.5 y el resto
es cero, es decir, 7.5=3.0 x 2.5+ 0. El operador modulo, funciona de la siguiente forma 7.5=3.0 x 2+1.5, calcula la
diferencia entre el dividendo (7.5)  y el producto del divisor (3.0) por la parte entera (2) del cociente, devolviendo
1.5. Asa pues, la operacion 7.5%3.0 da como resultado 1.5.

Los operadores relacionales son simbolos que se usan para comparar dos valores. Si el resultado de la comparacion es
correcto la expresion considerada es verdadera, en caso contrario es falsa. Por ejemplo, 8>4 (ocho mayor que cuatro) es
verdadera, se representa por el valor true del tipo basico boolean, en cambio, 8<4 (ocho menor que cuatro) es falsa,
false. En la primera columna de la tabla, se dan los simbolos de los operadores relacionales, el la segunda, el nombre
de dichos operadores, y a continuacin su significado mediante un ejemplo.

Operador	nombre	ejemplo	significado
<	menor que	a<b	a es menor que b
>	mayor que	a>b	a es mayor que b
==	igual a	a==b	a es igual a b
!=	no igual a	a!=b	a no es igual a b
<=	menor que o igual a	a<=5	a es menor que o igual a b
>=	mayor que o igual a	a>=b	a es menor que o igual a b
Se debe tener especial cuidado en no confundir el operador asignacion con el operador
relacional igual a. Las asignaciones se realizan con el simbolo =, las comparaciones con ==.

En el programa RelacionApp, se compara la variable i que guarda un 8, con un conjunto de valores, el resultado de la
comparacion es verdadero (true), o falso (false).

PALABRAS RESERVADAS
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class',
'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if',
'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


VARIABLES VALIDAS

 x = 2.5
La variable se escribe siempre a la izquierda de la igualdad. Si se escribe al reves, Python genera un mensaje de error:

 2.5 = x
SyntaxError: can't assign to literal
Para que IDLE muestre el valor de una variable, basta con escribir su nombre:

 x = 2.5
 x
2.5
Si una variable no se ha definido previamente, escribir su nombre genera un mensaje de error:

 x = -10
 y = 13



#LA SANGRIA ES IMPORTANTE PARA EL CODIGO
import re #LIBRERIA DE EXPRESIONES REGULARES

path = "cuento.txt"

23.1

try:
	archivo = open(path,'r') #r --> modo lectura para el texto
except:
	print("el archivo que intentas abrir no existe")
	quit()

texto = ""

for linea in archivo:
	texto += linea

print(texto)


patron = r"\w+"
result = re.findall(patron,texto) # la re --> identifica una expresion regular
print("\n resultado de busqueda ", result)

patron = "\n"
result = re.split(patron,texto) #split --> divide un texto, en este caso
#por los espacios
print("\n resultado de busqueda ", result)

patron = "arquitectura"
result = re.sub(patron,"cerdo araÃ±a", texto) #sub --> reemplaza
print("\n resultado de busqueda ", result)

3.5. Operadores relacionales
Los valores booleanos son ademas el resultado de expresiones que utilizan operadores relacionales (comparaciones entre valores):

3.5.1. Operador ==
El operador == evalua que los valores sean iguales para varios tipos de datos.

>>> 5 == 3
False
>>> 5 == 5
True
>>> "Plone" == 5
False
>>> "Plone" == "Plone"
True
>>> type("Plone") == str
True
3.5.2. Operador !=
El operador != evalua si los valores son distintos.

>>> 5 != 3
True
>>> "Plone" != 5
True
>>> "Plone" != False
True
3.5.3. Operador <
El operador < evalua si el valor del lado izquierdo es menor que el valor del lado derecho.

>>> 5 < 3
False
3.5.4. Operador >
El operador > evalua si el valor del lado izquierdo es mayor que el valor del lado derecho.

>>> 5 > 3
True
3.5.5. Operador <=
El operador <= evalua si el valor del lado izquierdo es menor o igual que el valor del lado derecho.

>>> 5 <= 3
False
3.5.6. Operador >=
El operador >= evalua si el valor del lado izquierdo es mayor o igual que el valor del lado derecho.

>>> 5 >= 3
True
Ejemplos
A continuacion, se presentan algunos ejemplos de su uso:

Ejemplo de definir variables numericas

a, b, a1, b1, c1 = 5, 5, 7, 3, 3
cadena1, cadena2 = 'Hola', 'Adios'
lista1, lista2 = [1, 'Lista Python', 23], [11, 'Lista Python', 23]
Ejemplo de operador relacional Igual

c = a == b
print c

cadenas = cadena1 == cadena2
print cadenas

listas = lista1 == lista2
print listas
Ejemplo de operador relacional Diferente

d = a1 != b
print d

cadena0 = cadena1 != cadena2
print cadena0
Ejemplo de operador relacional Menor que

f = b1 < a1
print f
Ejemplo de operador relacional Mayor que

e = a1 > b1
print e
Ejemplo de operador relacional Menor o igual que

h = b1 <= c1
print h
Ejemplo de operador relacional Mayor o igual que

g = b1 >= c1
print g